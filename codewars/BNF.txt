
expression      ::= factor | expression operator expression
factor          ::= number | identifier | assignment | '(' expression ')'
assignment      ::= identifier '=' expression

operator        ::= '+' | '-' | '*' | '/' | '%'

identifier      ::= letter | '_' { identifier-char }
identifier-char ::= '_' | letter | digit

number          ::= { digit } [ '.' digit { digit } ]

letter          ::= 'a' | 'b' | ... | 'y' | 'z' | 'A' | 'B' | ... | 'Y' | 'Z'
digit           ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'


class Parse_obj:
    def __init__(self, unp, parsed, status):
        self.unp    = unp
        self.parsed = parsed
        self.status = status

parser =  .f-> parse_obj -> f(parse_obj)

judge_letter  = .ch -> ch in letter



parser_combine = .*f -> .parse_obj -> parse_obj where:
        for _f in f:
            parse_obj = _f(parse_obj)
            if parse_obj.status in ('next', 'finished'):
                break
            else:
                continue
        if parse_obj.status not in  ('next','finished'):
            raise "session parse error"
            
            
parser_unlimit = .judge_end -> . *f  -> . parse_obj -> parse_obj where:
      global limitation
      i = 0
      combined = parser_combine(*f)
      while not judge_end(parse_obj):
          parse_obj = combined(parse_obj)
          if parse_obj.status == 'end-unlimit':
              break
          i += 1
          if limitation<i: raise Exception("parser deepth over limitation") 
      
          
letter_parser = . parse_obj> (unp,parsed,status) where:
    unp,parsed,status = parse_obj
    if status == 'next': pass
    else:
        condef+[] unp:
           case  []     =>
               status  = 'finished'
           case  (a,*b) =>
               parsed.unit.append(a)
               status = 'next'
               unp = b
               
            

     
                        

